# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: Events

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python2.7
  stage: dev
  region: us-east-1

  #Environment variables for the python functions
  environment:
    dbname: vhsocialrun
    dbuser: swapnofshin
    dbhost: vhsocialrun.culrclwoj6ec.us-east-1.rds.amazonaws.com
    dbpassword: password

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  ################################################################################
  CreateEvent: #Retrieves all runs from DynamoDB database
    memorySize: 128 #Memory in MB
    handler: CreateEvent/handler-CreateEvent.handler
    role: arn:aws:iam::863221427435:role/lambda_basic_execution #IAM role that defines permissions for the function
    events: #Events to trigger the function execution
      - 
        http:
          path: /event
          method: put
          integration: lambda
          request:
            template:
              application/json: ${file(mappingtemplates/request-CreateEvent.vtl)}
          documentation:
            summary: "Test summary"
            description: "Test description 1"
            methodResponses:
              -
                statusCode: 200
                responseModels:
                  "application/json": "CreateEvent"

  ################################################################################
  JoinEvent: #Retrieves all runs from DynamoDB database
    memorySize: 128 #Memory in MB
    handler: JoinEvent/handler-JoinEvent.handler
    role: arn:aws:iam::863221427435:role/lambda_basic_execution #IAM role that defines permissions for the function
    events: #Events to trigger the function execution
      - 
        http:
          path: /event/{eventid}/join
          method: post
          integration: lambda
          request:
            template:
              application/json: ${file(mappingtemplates/request-JoinEvent.vtl)}
  ################################################################################
  UpdateProgress: #Retrieves all runs from DynamoDB database
    memorySize: 128 #Memory in MB
    handler: UpdateProgress/handler-UpdateProgress.handler
    role: arn:aws:iam::863221427435:role/lambda_basic_execution #IAM role that defines permissions for the function
    events: #Events to trigger the function execution
      - 
        http:
          path: /event/progress
          method: post
          integration: lambda
          request:
            template:
              application/json: ${file(mappingtemplates/request-UpdateProgress.vtl)}
  ################################################################################
  GetEvents: #Retrieves all runs from DynamoDB database
    memorySize: 128 #Memory in MB
    handler: GetEvents/handler-GetEvents.handler
    role: arn:aws:iam::863221427435:role/lambda_basic_execution #IAM role that defines permissions for the function
    events: #Events to trigger the function execution
      - 
        http:
          path: /event
          method: get
          integration: lambda
          request:
            parameters:
              querystrings:
                userID: false #Pass this to retrieve the users events
                eventType: false #Distance or Timed
                eventScale: false #Global or Local
            template:
              application/json: ${file(mappingtemplates/request-GetEvents.vtl)}
          documentation:
            summary: "Test summary"
            description: "Test description 1"
            methodResponses:
              -
                statusCode: 200
                responseModels:
                  "application/json": "GetEvents"
  ################################################################################
  UpdateEvents: #Retrieves all runs from DynamoDB database
    memorySize: 128 #Memory in MB
    handler: UpdateEvents/handler-UpdateEvents.handler
    role: arn:aws:iam::863221427435:role/lambda_basic_execution #IAM role that defines permissions for the function

  ################################################################################
  GetProgress: #Retrieves all runs from DynamoDB database
    memorySize: 128 #Memory in MB
    handler: GetProgress/handler-GetProgress.handler
    role: arn:aws:iam::863221427435:role/lambda_basic_execution #IAM role that defines permissions for the function
    events: #Events to trigger the function execution
      - 
        http:
          path: /event/progress
          method: get
          integration: lambda
          request:
            parameters:
              querystrings:
                userID: true
            template:
              application/json: ${file(mappingtemplates/request-GetProgress.vtl)}
          documentation:
            summary: "Test summary"
            description: "Test description 1"
            methodResponses:
              -
                statusCode: 200
                responseModels:
                  "application/json": "GetProgress"
  ################################################################################
  GetCurrentEvent: #Retrieves all runs from DynamoDB database
    memorySize: 128 #Memory in MB
    handler: GetCurrentEvent/handler-GetCurrentEvent.handler
    role: arn:aws:iam::863221427435:role/lambda_basic_execution #IAM role that defines permissions for the function
    events: #Events to trigger the function execution
      - 
        http:
          path: /event/current
          method: get
          integration: lambda
          request:
            parameters:
              querystrings:
                userID: true
            template:
              application/json: ${file(mappingtemplates/request-GetProgress.vtl)}
custom:
  documentation:
    models:
      -
        name: "responseCreateEvent"
        description: "Response Model for creating an event"
        contentType: "application/json"
        schema: ${file(models/response-CreateEvent.json)}
      -
        name: "responseGetProgress"
        description: "Response Model for retrieving information about events"
        contentType: "application/json"
        schema: ${file(models/response-GetProgress.json)}
